Screamer is an extension of Common Lisp that adds support for nondeterministic
programming.  Screamer consists of two levels.  The basic nondeterministic
level adds support for backtracking and undoable side effects.  On top of this
nondeterministic substrate, Screamer provides a comprehensive constraint
programming language in which one can formulate and solve mixed systems of
numeric and symbolic constraints.  Together, these two levels augment Common
Lisp with practically all of the functionality of both Prolog and constraint
logic programming languages such as CHiP and CLP(R).  Furthermore, Screamer is
fully integrated with Common Lisp. Screamer programs can coexist and
interoperate with other extensions to Common Lisp such as CLOS, CLIM and
Iterate.

In several ways Screamer is more efficient than other implementations of
backtracking languages.  First, Screamer code is transformed into Common Lisp
which can be compiled by the underlying Common Lisp system.  Many competing
implementations of nondeterministic Lisp are interpreters and thus are far
less efficient than Screamer.  Second, the backtracking primitives require
fairly low overhead in Screamer.  Finally, this overhead to support
backtracking is only paid for those portions of the program which use the
backtracking primitives.  Deterministic portions of user programs pass through
the Screamer-to-Common-Lisp transformation unchanged.  Since in practise, only
small portions of typical programs utilize the backtracking primitives,
Screamer can produce more efficient code than compilers for languages in which
backtracking is more pervasive.

Screamer is fairly portable across most Common Lisp implementations.

Screamer was written by Jeffrey Mark Siskind and David Allen McAllester, see
file LICENSE for licensing information.
